// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 model User {
  id              String       @id @default(cuid()) 
  name            String?
  email           String?      @unique
  password        String?      // Make password nullable for OAuth providers
  role            Role         @default(USER)
  emailVerified   DateTime?    @map("email_verified")
  image           String?
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime     @default(now())
  
  // Sellers can have multiple jobs
  jobs            Job[]        @relation("UserJobs")

  // Users can apply for jobs (restricted to 1 in the application logic)
  applications    Application[]

  // Users can be accepted to a job
  acceptedJobs    Job[]        @relation("AcceptedUserJobs")
  
  @@map("users")
}

model Session {
  id           String      @id @default(cuid())
  sessionToken String      @unique @map("session_token")
  userId       String      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Job {
  id              Int            @id @default(autoincrement())
  title           String
  shorturl        String?
  longurl         String?
  shortdescription String
  description     String?
  price           Float
  taken           Boolean

  createdAt       DateTime       @default(now())
  
  // Job belongs to a seller (a user with role SELLER)
  sellerId        String
  seller          User           @relation("UserJobs", fields: [sellerId], references: [id])
  
  // Multiple users can apply, but only one can be accepted
  applications    Application[]
  
  categories      JobCategory[]

  // Tracks which user is accepted for this job (enforcing 1 user per job)
  acceptedUserId  String?         // Nullable since a job may not have an accepted user initially
  acceptedUser    User?        @relation("AcceptedUserJobs", fields: [acceptedUserId], references: [id])
}

model Category {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  jobs     JobCategory[]
}

model JobCategory {
  jobId       Int
  job         Job       @relation(fields: [jobId], references: [id])

  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])

  @@id([jobId, categoryId])
}

model Application {
  id         Int        @id @default(autoincrement())
  appliedAt  DateTime   @default(now())
  status     Status     @default(OPEN)  // Use application status to track whether user is accepted
  
  // Relationships
  jobId      Int
  job        Job        @relation(fields: [jobId], references: [id])

  userId     String
  user       User       @relation(fields: [userId], references: [id])

  @@unique([jobId, userId])  // Ensures a user can apply only once to a job
}

enum Role {
  USER
  SELLER

}

enum Status {
  OPEN
  PENDING
  CLOSED
  ACCEPTED  // Indicates that the application has been accepted and the user is assigned to the job
  REJECTED  // Indicates the user has been rejected from the job
}
