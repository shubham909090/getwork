// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement()) 
  name String 
  email String @unique
  password String
  role Role @default(USER)
  authToken String?
  crated DateTime @default(now())
  applications Application[]
}
model Seller {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  role       Role     @default(SELLER)
  authToken  String?
  createdAt  DateTime @default(now())
  jobs Job[]
}



model Job {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime       @default(now())

  // Relationships
  sellerId    Int
  seller      Seller         @relation(fields: [sellerId], references: [id])

  applications Application[] // A job can have multiple applications

  categories  JobCategory[]
}


model Category {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  jobs     JobCategory[]
}


model JobCategory {
  jobId       Int
  job         Job       @relation(fields: [jobId], references: [id])

  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])

  @@id([jobId, categoryId])
}

model Application {
  id         Int        @id @default(autoincrement())
  appliedAt  DateTime   @default(now())
  status     Status     @default(OPEN)

  // Relationships
  jobId      Int
  job        Job        @relation(fields: [jobId], references: [id])

  userId     Int        @unique
  user       User       @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  SELLER
}
enum Status {
  OPEN
  PENDING
  CLOSED
}